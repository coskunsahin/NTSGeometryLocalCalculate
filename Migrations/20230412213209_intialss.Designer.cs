// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using rootrooot.Models;

#nullable disable

namespace WebApplication2.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230412213209_intialss")]
    partial class intialss
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("fakestoreapi.domain.Entities.Settlement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City_iata")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country_iata")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Hub")
                        .HasColumnType("int");

                    b.Property<string>("Iata")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Geometry>("Location")
                        .HasColumnType("geography");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Timezone_region_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Settlement");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Amsterdam",
                            City_iata = "AMS",
                            Country = "Netherlands",
                            Country_iata = "NL",
                            Hub = 7,
                            Iata = "AMS",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (69.9388777 18.4839233)"),
                            Name = "Amsterdam",
                            Rating = 3,
                            Timezone_region_name = "Europe/Amsterdam",
                            Type = "airport"
                        },
                        new
                        {
                            Id = 2,
                            City = "Santo PAULO",
                            City_iata = "SMP",
                            Country = "Brazil",
                            Country_iata = "BR",
                            Hub = 8,
                            Iata = "LRD",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (69.9388777 18.4839233)"),
                            Name = "Hetron",
                            Rating = 4,
                            Timezone_region_name = "America/SauPaulo",
                            Type = "airport"
                        },
                        new
                        {
                            Id = 3,
                            City = "Istanbul",
                            City_iata = "SAP",
                            Country = "Turkey",
                            Country_iata = "TR",
                            Hub = 9,
                            Iata = "SAP",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (69.9388777 18.4839233)"),
                            Name = "Istanbul",
                            Rating = 5,
                            Timezone_region_name = "Europe/Istanbul",
                            Type = "airport"
                        },
                        new
                        {
                            Id = 4,
                            City = "London",
                            City_iata = "LND",
                            Country = "England",
                            Country_iata = "IN",
                            Hub = 6,
                            Iata = "LND",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (69.9388777 18.4839233)"),
                            Name = "London",
                            Rating = 6,
                            Timezone_region_name = "Europe/London",
                            Type = "airport"
                        },
                        new
                        {
                            Id = 5,
                            City = "Montreal",
                            City_iata = "MNT",
                            Country = "Canada",
                            Country_iata = "CA",
                            Hub = 4,
                            Iata = "MNT",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (69.9388777 18.4839233)"),
                            Name = "Montreal",
                            Rating = 7,
                            Timezone_region_name = "America/Montreal",
                            Type = "airport"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
